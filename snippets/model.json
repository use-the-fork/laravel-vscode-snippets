{
  "Laravel Model: Table": {
    "prefix": "Model::table",
    "body": [
      "/**",
      " * The table associated with the model.",
      " *",
      " * @var string",
      " */",
      "protected \\$table = '$0';"
    ],
    "description": "Protected Table: The table associated with the model."
  },
  "Laravel Model: Primary Key": {
    "prefix": "Model::primaryKey",
    "body": [
      "/**",
      " * The primary key associated with the table.",
      " *",
      " * @var string",
      " */",
      "protected \\$primaryKey = '$0';"
    ],
    "description": "Primary Key: The primary key associated with the table."
  },
  "Laravel Model: Incrementing": {
    "prefix": "Model::incrementing",
    "body": [
      "/**",
      " * Indicates if the IDs are auto-incrementing.",
      " *",
      " * @var bool",
      " */",
      "public \\$incrementing = ${1:false};"
    ],
    "description": "Incrementing: Indicates if the IDs are auto-incrementing."
  },
  "Laravel Model: Timestamps": {
    "prefix": "Model::timestamps",
    "body": [
      "/**",
      " * Indicates if the model should be timestamped.",
      " *",
      " * @var bool",
      " */",
      "public \\$timestamps = ${1:false};"
    ],
    "description": "Timestamps: Indicates if the model should be timestamped."
  },
  "Laravel Model: Date Format": {
    "prefix": "Model::dateFormat",
    "body": [
      "/**",
      " * The storage format of the model's date columns.",
      " *",
      " * @var string",
      " */",
      "protected \\$dateFormat = '$0';"
    ],
    "description": "Date Format: The storage format of the model's date columns."
  },
  "Laravel Model: Database Connection": {
    "prefix": "Model::databaseConnection",
    "body": [
      "/**",
      " * The database connection that should be used by the model.",
      " *",
      " * @var string",
      " */",
      "protected \\$connection = '$0';"
    ],
    "description": "Datebase Connection: The database connection that should be used by the model."
  },
  "Laravel Model: Attribute Casting": {
    "prefix": "Model::casts",
    "body": [
      "/**",
      " * The attributes that should be cast to native types.",
      " *",
      " * @var array",
      " */",
      "protected \\$casts = [",
      "\t'$1' => '${0:type}',",
      "];"
    ],
    "description": "Attribute Casting: he attributes that should be cast to native types within your model."
  },
  "Laravel Model: The model's default values for attributes.": {
    "prefix": "Model::attributes",
    "body": [
      "/**",
      " * The model's default values for attributes.",
      " *",
      " * @var array",
      " */",
      "protected \\$attributes = [",
      "\t'$0' => '${1}',",
      "];"
    ],
    "description": "Default attributes: The model's default values for attributes."
  },
  "Laravel Model: Mass Assignment (Fillable)": {
    "prefix": "Model::fillable",
    "body": [
      "/**",
      " * The attributes that are mass assignable.",
      " *",
      " * @var array",
      " */",
      "protected \\$fillable = ['$0'];"
    ],
    "description": "Mass Assignment (Fillable): The attributes that are mass assignable."
  },
  "Laravel Model: Guard Attributes": {
    "prefix": "Model::guarded",
    "body": [
      "/**",
      " * The attributes that are mass assignable.",
      " *",
      " * @var array",
      " */",
      "protected \\$fillable = ['$0'];"
    ],
    "description": "Mass Assignment (Fillable): The attributes that are mass assignable."
  },
  "Laravel Model: Prunable": {
    "prefix": "Model::prunable",
    "body": [
      "use ${0|Prunable,MassPrunable|};",
      "\n",
      "/**",
      " * Get the prunable model query.",
      " */",
      "public function prunable(): Builder",
      "{",
      "\treturn static::where('${1:created_at}', '${2:<=}', ${3:now()->subMonth()});",
      "}"
    ],
    "description": "Prunable: Periodically delete models that are no longer needed."
  },
  "Laravel Model: Dates": {
    "prefix": "Model::dates",
    "body": [
      "/**",
      " * The attributes that should be mutated to dates.",
      " *",
      " * @var array",
      " */",
      "protected \\$dates = ['created_at', 'updated_at', '${0:deleted_at}'];"
    ],
    "description": "Dates: The attributes that should be mutated to dates."
  },
  "Laravel Model: Boot": {
    "prefix": "Model::boot",
    "body": [
      "/**",
      " * The \"booting\" method of the model.",
      " *",
      " * @return void",
      " */",
      "protected static function boot()",
      "{",
      "\tparent::boot();",
      "\t",
      "\t$0",
      "}"
    ],
    "description": "Boot: The \"booting\" method of the model."
  },
  "Laravel Model: Local Scope": {
    "prefix": "Model::scope",
    "body": [
      "/**",
      " * Scope a query to only include $1",
      " *",
      " * @param  \\Illuminate\\Database\\Eloquent\\Builder \\$query",
      " * @return \\Illuminate\\Database\\Eloquent\\Builder",
      " */",
      "public function scope$2(Builder \\$query)",
      "{",
      "\treturn \\$query->where('$3'$0);",
      "}"
    ],
    "description": "Local Scope: Query a local scope within your model."
  },
  "Laravel Model: Dynamic Scope": {
    "prefix": "Model::scopeOfType",
    "body": [
      "/**",
      " * Scope a query to only include $1 of a given type.",
      " *",
      " * @param  \\Illuminate\\Database\\Eloquent\\Builder \\$query",
      " * @return \\Illuminate\\Database\\Eloquent\\Builder",
      " */",
      "public function scopeOfType(Builder \\$query, string \\$type)",
      "{",
      "\treturn \\$query->where('$3', \\$type);",
      "}"
    ],
    "description": "Dynamic Scope: Define a scope that accepts parameters within your model."
  },
  "Laravel Model: One to One Relationship": {
    "prefix": "Model::hasOne",
    "body": [
      "/**",
      " * Get the $1 associated with the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOne",
      " */",
      "public function $1()${2:: HasOne}",
      "{",
      "\treturn \\$this->hasOne($0::class)${3:->latestOfMany()}${4:->oldestOfMany()}${5:->ofMany('$6','${7|min,max|}')};",
      "}"
    ],
    "description": "One to One: Define a One to One relationship within your model."
  },
  "Laravel Model: Belongs To Relationship": {
    "prefix": "Model::belongsTo",
    "body": [
      "/**",
      " * Get the $1 that owns the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
      " */",
      "public function $1()${2:: BelongsTo}",
      "{",
      "\treturn \\$this->belongsTo($0::class)${4:->withDefault(['$5'=>'$6'])};",
      "}"
    ],
    "description": "Belongs To: Define a Belongs To relationship within your model."
  },
  "Laravel Model: One to Many": {
    "prefix": "Model::hasMany",
    "body": [
      "/**",
      " * Get all of the $1 for the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasMany",
      " */",
      "public function $1()${2:: HasMany}",
      "{",
      "\treturn \\$this->hasMany($0::class);",
      "}"
    ],
    "description": "One to Many: Define a One to Many relationship within your model."
  },
  "Laravel Model: Many to Many": {
    "prefix": "Model::belongsToMany",
    "body": [
      "/**",
      " * The $1 that belong to the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
      " */",
      "public function $1()${2:: BelongsToMany}",
      "{",
      "\treturn \\$this->belongsToMany($0::class);",
      "}"
    ],
    "description": "Many to Many: Define a Many to Many relationship within your model."
  },
  "Laravel Model: Belongs to Many": {
    "prefix": "Model::belongsToMany",
    "body": [
      "/**",
      " * The $1 that belong to the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\BelongsToMany",
      " */",
      "public function $1()${2:: BelongsToMany}",
      "{",
      "\treturn \\$this->belongsToMany($0::class);",
      "}"
    ],
    "description": "Belongs to Many: Define a Belongs to Many relationship within your model."
  },
  "Laravel Model: Has Many Through": {
    "prefix": "Model::hasManyThrough",
    "body": [
      "/**",
      " * Get all of the $1 for the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasManyThrough",
      " */",
      "public function $1()${2:: HasManyThrough}",
      "{",
      "\treturn \\$this->hasManyThrough($0::class);",
      "}"
    ],
    "description": "Has Many Through: Define a Has Many Through relationship within your model."
  },
  "Laravel Model: Has One Through": {
    "prefix": "Model::hasOneThrough",
    "body": [
      "/**",
      " * Get the $1 associated with the ${TM_FILENAME_BASE}",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\HasOneThrough",
      " */",
      "public function $1()${2:: HasOneThrough}",
      "{",
      "\treturn \\$this->hasOneThrough($3::class, $4::class);",
      "}"
    ],
    "description": "Has One Through: Define a Has One Through relationship within your model. (5.8+)"
  },
  "Laravel Model: Morph To": {
    "prefix": "Model::morphTo",
    "body": [
      "/**",
      " * Get the parent ${1}able model.",
      " */",
      "public function $1()able",
      "{",
      "\treturn \\$this->morphTo();",
      "}"
    ],
    "description": "Morph To: Get the 'able' model "
  },
  "Laravel Model: Morph One": {
    "prefix": "Model::morphOne",
    "body": [
      "/**",
      " * Get the models ${1}.",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphOne",
      " */",
      "public function ${1}()${2:: MorphOne}",
      "{",
      "\treturn \\$this->morphOne(${0}::class, '${1}able')${4:->latestOfMany()}${5:->oldestOfMany()}${6:->ofMany('$7','${8|min,max|}')};",
      "}"
    ],
    "description": "Morph One: Define a Morph One relationship within your model."
  },
  "Laravel Model: Morph Many": {
    "prefix": "Model::morphMany",
    "body": [
      "/**",
      " * Get all the models ${1}.",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphMany",
      " */",
      "public function ${1}()${2:: MorphMany}",
      "{",
      "\treturn \\$this->morphMany(${0}::class, '${1}able');",
      "}"
    ],
    "description": "Morph Many: Define a Morph to many relationship within your model."
  },
  "Laravel Model: Morphed By Many": {
    "prefix": "Model::morphedByMany",
    "body": [
      "/**",
      " * Get all of the ${4:/downcase} that are assigned this ${3}.",
      " *",
      " * @return \\Illuminate\\Database\\Eloquent\\Relations\\MorphToMany",
      " */",
      "public function ${1}()${2:: MorphToMany}",
      "{",
      "\treturn \\$this->morphedByMany(${4}::class, '${3}able');",
      "}"
    ],
    "description": "Morphed By Many: Define relationship to parent models."
  },
  "Laravel Model: Hidden": {
    "prefix": "Model::hidden",
    "body": [
      "/**",
      " * The attributes that should be hidden for arrays.",
      " *",
      " * @var array",
      " */",
      "protected \\$hidden = ['$0'];"
    ],
    "description": "Hidden: The attributes that should be hidden for arrays."
  },
  "Laravel Model: Visible": {
    "prefix": "Model::visible",
    "body": [
      "/**",
      " * The attributes that should be visible in arrays.",
      " *",
      " * @var array",
      " */",
      "protected \\$visible = ['$0'];"
    ],
    "description": "Visible: The attributes that should be visible in arrays."
  },
  "Laravel Model: Appends": {
    "prefix": "Model::appends",
    "body": [
      "/**",
      " * The accessors to append to the model's array form.",
      " *",
      " * @var array",
      " */",
      "protected \\$appends = ['$0'];"
    ],
    "description": "Appends: The accessors to append to the model's array form."
  },
  "Laravel Model: Touches": {
    "prefix": "Model::touches",
    "body": [
      "/**",
      " * The relationships that should be touched on save.",
      " *",
      " * @var array",
      " */",
      "protected \\$touches = [$0];"
    ],
    "description": "Touches: The relationships that should be touched on save."
  },
  "Laravel Model: KeyType": {
    "prefix": "Model::keyType",
    "body": [
      "/**",
      " * The \"type\" of the auto-incrementing ID.",
      " *",
      " * @var string",
      " */",
      "protected \\$keyType = '${1:int}';"
    ],
    "description": "KeyType: The \"type\" of the auto-incrementing ID."
  },
  "Laravel Model: PerPage": {
    "prefix": "Model::perPage",
    "body": [
      "/**",
      " * The number of models to return for pagination.",
      " *",
      " * @var int",
      " */",
      "protected \\$perPage = $0;"
    ],
    "description": "PerPage: The number of models to return for pagination."
  },
  "Laravel Model: Created At": {
    "prefix": "Model::createdAt",
    "body": [
      "/**",
      " * The name of the \"created at\" column.",
      " *",
      " * @var string",
      " */",
      "const CREATED_AT = '${1:created_at}';$0"
    ],
    "description": "Created At: The name of the \"created at\" column."
  },
  "Laravel Model: Updated At": {
    "prefix": "Model::updatedAt",
    "body": [
      "/**",
      " * The name of the \"updated at\" column.",
      " *",
      " * @var string",
      " */",
      "const UPDATED_AT = '${1:updated_at}';$0"
    ],
    "description": "Updated At: The name of the \"updated at\" column."
  },
  "Laravel Model: Deleted At": {
    "prefix": "Model::deletedAt",
    "body": [
      "/**",
      " * The name of the \"deleted at\" column.",
      " *",
      " * @var string",
      " */",
      "const DELETED_AT = '${1:deleted_at}';$0"
    ],
    "description": "Deleted At: The name of the \"deleted at\" column."
  },
  "Laravel Model: Dispatches Events": {
    "prefix": "Model::dispatchesEvents",
    "body": [
      "use Notifiable;",
      "",
      "/**",
      " * The event map for the model.",
      " *",
      " * @var array",
      " */",
      "protected \\$dispatchesEvents = [",
      "\t'$1' => $2,",
      "];"
    ],
    "description": "Dispatches Events: The event map for the model."
  },
  "Laravel Model: Accessor": {
    "prefix": "Model::accessor",
    "body": [
      "/**",
      " * Get the $1",
      " *",
      " * @param  string  \\$value",
      " * @return ${4:string}",
      " */",
      "public function get$2Attribute(\\$value)",
      "{",
      "\treturn ${3:\\$value};",
      "}"
    ],
    "description": "Accessors: Define an accessor for the model."
  },
  "Laravel Model: Mutator": {
    "prefix": "Model::mutator",
    "body": [
      "/**",
      " * Set the $1",
      " *",
      " * @param  string  \\$value",
      " * @return ${5:void}",
      " */",
      "public function set$2Attribute(\\$value)",
      "{",
      "\treturn \\$this->attributes['$3'] = ${4:\\$value};",
      "}"
    ],
    "description": "Mutators: Define a mutator for the model."
  }
}
